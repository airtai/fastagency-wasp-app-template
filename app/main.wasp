app awesomeSaaSApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "Awesome SaaS app",
  head: [
        "<meta property='og:type' content='website' />",
        "<meta property='og:title' content='Awesome SaaS app' />",
        "<meta property='og:description' content='I made a SaaS App using FastAgency!' />",
        "<meta property='og:url' content='https://fastagency.ai/' />",
        "<meta property='og:image' content='https://fastagency.ai/public-banner.png' />",
        "<meta property='og:image:type' content='image/png' />",
        "<meta property='og:image:width' content='800' />",
        "<meta property='og:image:height' content='400' />",
        "<meta name='twitter:card' content='summary_large_image' />",
        "<meta name='twitter:title' content='Awesome SaaS app' />",
        "<meta name='twitter:description' content='I made a SaaS App using FastAgency!' />",
        "<meta name='twitter:image' content='https://fastagency.ai/public-banner.png' />",
        // you can put your analytics scripts here
        // "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.js'></script>",
        // plausible has script extension `script.local.js` for local development
        // "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.local.js'></script>",
        // google analytics only needs one script and will automatically detect if you are in dev mode
        //"<!-- Google tag (gtag.js) --><script>...</script>"
        "<script type='text/javascript'> (function(l) { if (l.search[1] === '/' ) { var decoded = l.search.slice(1).split('&').map(function(s) { return s.replace(/~and~/g, '&') }).join('?'); window.history.replaceState(null, null, l.pathname.slice(0, -1) + decoded + l.hash ); } }(window.location)) </script>"
  ],
  // üîê Auth out of the box! https://wasp-lang.dev/docs/auth/overview
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {},
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/chat",
  },
  db: {
    system: PostgreSQL,
  },
  client: {
    rootComponent: import App from "@src/client/App",
  },

  emailSender: {
    // Note that the "Dummy" provider is just for local development purposes.
    // Make sure to check the server logs for the confirmation email token (it will not be sent to an address)!
    // Please use SendGrid in production. See: https://docs.opensaas.sh/guides/email-sending/
    provider: SendGrid,
    defaultFrom: {
      name: "Open SaaS App",
      // When using SendGrid, you must use the same email address that you configured your account to send out emails with!
      email: "me@example.com"
    },
  },
   webSocket: {
    fn: import { socketFn } from "@src/server/websocket/webSocket.js"
  },
}

/* üíΩ Wasp defines DB entities via Prisma Database Models:
 * https://wasp-lang.dev/docs/data-model/entities
 */

entity User {=psl
  id                        Int             @id @default(autoincrement())
  uuid                      String?         @default(uuid())
  email                     String?         @unique
  username                  String?         @unique
  createdAt                 DateTime        @default(now())
  lastActiveTimestamp       DateTime        @default(now())
  isAdmin                   Boolean         @default(false)
  checkoutSessionId         String?
  chats    Chat[]
  conversations    Conversation[]
psl=}

entity Chat {=psl
    id                        Int             @id @default(autoincrement())
    uuid                      String?         @default(uuid())
    createdAt                 DateTime        @default(now())
    updatedAt                 DateTime        @updatedAt
    team_uuid                 String?
    team_name                 String?
    team_status               String?
    userRespondedWithNextAction             Boolean         @default(false)
    agentChatHistory         String?
    isExceptionOccured       Boolean         @default(false)
    showLoader  Boolean         @default(false)
    streamAgentResponse Boolean         @default(false)
    customerBrief       String?
    user        User?    @relation(fields: [userId], references: [id])
    userId      Int?
    name        String?          @default("New chat")
    isChatNameUpdated Boolean         @default(false)
    isChatTerminated Boolean         @default(false)
    selectedTeam   String?
    conversations    Conversation[]
psl=}

entity Conversation {=psl
    id                          Int             @id @default(autoincrement())
    createdAt                   DateTime        @default(now())
    updatedAt                   DateTime        @updatedAt
    message                     String
    role                        String
    agentConversationHistory    String?
    isLoading                   Boolean         @default(false)
    chat                        Chat?           @relation(fields: [chatId], references: [id])
    chatId                      Int?
    user                        User?           @relation(fields: [userId], references: [id])
    userId                      Int?

psl=}

/* üì° These are the Wasp Routes (You can protect them easily w/ 'authRequired: true');
 * https://wasp-lang.dev/docs/tutorial/pages
 */

route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/client/landing-page/LandingPage"
}

route chatPageRoute { path: "/chat/:id?", to: ChatPage }
page ChatPage {
  component: import ChatPageWithCustomAuth from "@src/client/app/ChatPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/client/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { SignupPage } from "@src/client/auth/SignupPage"
}

route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  component: import AccountPageWithCustomAuth from "@src/client/app/AccountPage"
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@src/client/app/CheckoutPage"
}

route TocPageRoute { path: "/toc", to: TocPage }
page TocPage {
  component: import TocPage from "@src/client/app/TocPage",
}
route PrivacyRoute { path: "/privacy", to: PrivacyPage }
page PrivacyPage {
  component: import PrivacyPage from "@src/client/app/PrivacyPage",
}

/* ‚õë These are the Wasp Operations, which allow the client and server to interact:
 * https://wasp-lang.dev/docs/data-model/operations/overview
 */

// üìù Actions

action updateCurrentUser {
  fn: import { updateCurrentUser } from "@src/server/actions.js",
  entities: [User]
}

action updateUserById {
  fn: import { updateUserById } from "@src/server/actions.js",
  entities: [User]
}


action createNewChat {
  fn: import { createNewChat } from "@src/server/actions.js",
  entities: [Chat, Conversation]
}

action updateCurrentChat {
  fn: import { updateCurrentChat } from "@src/server/actions.js",
  entities: [Chat]
}

action updateCurrentConversation {
  fn: import { updateCurrentConversation } from "@src/server/actions.js",
  entities: [Conversation]
}

action deleteLastConversationInChat {
  fn: import { deleteLastConversationInChat } from "@src/server/actions.js",
  entities: [Conversation]
}

action retryTeamChat {
  fn: import { retryTeamChat } from "@src/server/actions.js",
  entities: [Chat, Conversation]
}

action createNewAndReturnAllConversations {
  fn: import { createNewAndReturnAllConversations } from "@src/server/actions.js",
  entities: [Conversation]
}

action createNewAndReturnLastConversation {
  fn: import { createNewAndReturnLastConversation } from "@src/server/actions.js",
  entities: [Conversation]
}

action getAgentResponse {
  fn: import { getAgentResponse } from "@src/server/actions.js",
  entities: [Chat, Conversation]
}

// üìö Queries

query getChat {
  fn: import { getChat } from "@src/server/queries.js",
  entities: [Chat]
}

query getChats {
  fn: import { getChats } from "@src/server/queries.js",
  entities: [Chat]
}

query getConversations {
  fn: import { getConversations } from "@src/server/queries.js",
  entities: [Conversation]
}

query getChatFromUUID {
  fn: import { getChatFromUUID } from "@src/server/queries.js",
  entities: [Chat]
}

